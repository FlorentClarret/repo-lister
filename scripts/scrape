#!/usr/bin/env node
const fetch = require('isomorphic-unfetch')
const fs = require('fs')
const {promisify} = require('util')

const open = promisify(fs.open)
const readFile = promisify(fs.readFile)
const writeFile = promisify(fs.writeFile)

const DO_FETCH = false
const GH_TOKEN = process.env.GH_TOKEN

if (!GH_TOKEN) {
  console.error('GH_TOKEN not defined')
  process.exit(1)
}

process.on('unhandledRejection', err => {
  console.trace('Unhandled Rejection', err)
  process.exit(1)
})

async function fileExists (path) {
  try {
    await open(path, 'r')
    return true
  } catch (err) {
    return false
  }
}

async function loadFromDisk (path) {
  return readFile(path)
    .then(buffer => buffer.toString('utf8'))
    .then(content => JSON.parse(content))
}

function sanitize (s) {
  return s.replace(/[^a-z0-9]/gi, '_').toLowerCase()
}

async function writeToDisk (data, path) {
  return writeFile(path, JSON.stringify(data, null, 2))
}

async function writeJsonResponseToDisk (req, path, defaultText = '') {
  return req
    .then(res => res.ok ? res.json() : defaultText)
    .then(data => writeToDisk(data, path)
      .then(() => data))
}

async function writeTextResponseToDisk (req, path, defaultText = '') {
  return req
    .then(res => res.ok ? res.text() : defaultText)
    .then(data => writeToDisk(data, path)
      .then(() => data))
}

async function getReposInfo (forceFetch = false) {
  const filePath = './scraped/user_repos.json'

  async function writeUserRepos (p) {
    const req = fetch('https://api.github.com/user/repos?per_page=100', {
      headers: {
        Accept: 'application/vnd.github.v3+json',
        Authorization: `Bearer ${GH_TOKEN}`
      }
    })
    return writeJsonResponseToDisk(req, p)
  }

  if (forceFetch || !await fileExists(filePath)) {
    await writeUserRepos(filePath)
  }
  return loadFromDisk(filePath)
}

async function getReadme (fullName, forceFetch = false) {
  const filePath = `./scraped/readme_${sanitize(fullName)}.json`

  async function writeReadme (p) {
    const req = fetch(
      `https://api.github.com/repos/${fullName}/contents/README.md?ref=master`,
      {
        method: 'GET',
        headers: {
          Accept: 'application/vnd.github.v3.html',
          Authorization: `Token ${GH_TOKEN}`
        }
      }
    )
    return writeTextResponseToDisk(req, p)
  }

  if (forceFetch || !await fileExists(filePath)) {
    await writeReadme(filePath)
  }
  return loadFromDisk(filePath)

}

getReposInfo(DO_FETCH)
  .then(reposInfo => {
    const data = {}
    for (let el of reposInfo) {
      data[el.full_name] = {data: el}
    }
    return data
  })
  .then(data => {
    return Promise.all(Object.entries(data).map(el => {
      [key, value] = el
      return getReadme(key, DO_FETCH)
        .then(content => {
          [key, value] = el
          data[key].readme = content
        })
    }))
      .then(() => data
      )
  })
  .then(data => writeToDisk(data, 'data.json'))
  .then(() => console.log('Done'))
  .catch(err => console.trace(err))
