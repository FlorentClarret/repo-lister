"<div class=\"announce instapaper_body md\" data-path=\"README.md\" id=\"file\"><article class=\"markdown-body entry-content\" itemprop=\"text\"><h1><a href=\"#rspec-steps\" aria-hidden=\"true\" class=\"anchor\" id=\"user-content-rspec-steps\"><svg aria-hidden=\"true\" class=\"octicon octicon-link\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>RSpec Steps</h1>\n<h2><a href=\"#-or-why-would-i-want-to-relearn-how-to-write-specs-\" aria-hidden=\"true\" class=\"anchor\" id=\"user-content--or-why-would-i-want-to-relearn-how-to-write-specs-\"><svg aria-hidden=\"true\" class=\"octicon octicon-link\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>( or: why would I want to relearn how to write specs? )</h2>\n<p>RSpec Steps allows you to chain examples into a series of steps that run\nin sequence and which stop when a step fails.  It's often incredibly\nuseful to be able to aseemble a series of tests that should all pass,\nbut where completely isolating them is less than sensible.</p>\n<p>( RSpec Steps has gone on with the tide of progress - it only supports RSpec\n3.x. If you need Rspec 2 suport, check out two-step:\n<a href=\"https://github.com/LRDesign/two-step\">https://github.com/LRDesign/two-step</a> )</p>\n<p>One excellent example is web site integration tests.  With RSpec steps you can\ndo:</p>\n<div class=\"highlight highlight-source-ruby\"><pre><span class=\"pl-c1\">RSpec</span>::<span class=\"pl-c1\">Steps</span>.steps <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>Login and change password<span class=\"pl-pds\">\"</span></span> <span class=\"pl-k\">do</span>\n  it <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>should show the login form<span class=\"pl-pds\">\"</span></span> <span class=\"pl-k\">do</span>\n    visit root\n    page.should have_text <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>Login<span class=\"pl-pds\">\"</span></span>\n  <span class=\"pl-k\">end</span>\n\n  it <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>should successfully log in<span class=\"pl-pds\">\"</span></span> <span class=\"pl-k\">do</span>\n    fill_in <span class=\"pl-c1\">:name</span>, <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>Johnny User<span class=\"pl-pds\">\"</span></span>\n    click <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>Login<span class=\"pl-pds\">\"</span></span>\n    page.should have_text <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>Welcome, Johnny!<span class=\"pl-pds\">\"</span></span>\n  <span class=\"pl-k\">end</span>\n\n  it <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>should load the password change form<span class=\"pl-pds\">\"</span></span> <span class=\"pl-k\">do</span>\n    click <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>My Settings<span class=\"pl-pds\">\"</span></span>\n    click <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>Update Password<span class=\"pl-pds\">\"</span></span>\n    page.should have_selector(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>form#update_password<span class=\"pl-pds\">\"</span></span>)\n  <span class=\"pl-k\">end</span>\n\n  it <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>should change the user's password successfully<span class=\"pl-pds\">\"</span></span> <span class=\"pl-k\">do</span>\n    fill_in <span class=\"pl-c1\">:password</span>, <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>foobar<span class=\"pl-pds\">\"</span></span>\n    fill_in <span class=\"pl-c1\">:password_confirmation</span>, <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>foobar<span class=\"pl-pds\">\"</span></span>\n    click <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>Change Password<span class=\"pl-pds\">\"</span></span>\n    page.should have_text <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>Password changed successfully!<span class=\"pl-pds\">\"</span></span>\n    <span class=\"pl-c1\">User</span>.find_by_name(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>Johnny User<span class=\"pl-pds\">\"</span></span>).valid_password?(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>foobar<span class=\"pl-pds\">\"</span></span>).should be_true\n  <span class=\"pl-k\">end</span>\n<span class=\"pl-k\">end</span></pre></div>\n<p>The examples above will be run in order.  State is preserved between examples\ninside a \"steps\" block: any DB transactions will not roll back until the entire\nsequence has been complete.</p>\n<p>If any example inside the \"steps\" block fails, all remaining steps will be marked\npending and therefore skipped.</p>\n<h2><a href=\"#rationale\" aria-hidden=\"true\" class=\"anchor\" id=\"user-content-rationale\"><svg aria-hidden=\"true\" class=\"octicon octicon-link\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Rationale</h2>\n<p>RSpec's philosophy is that all examples should be completely independent.  This\nis a great philosophy for most purposes, and we recommend you stick to it in\nalmost all cases.  BUT, that complete separation of examples really sucks when\nyou're trying to write long stories involving many requests.   You are usually\nstuck with three choices:</p>\n<ol>\n<li>Write a sequence of examples, each of which repeats the behavior of all\nprevious examples. Downside: horrendously inefficient.</li>\n<li>Write a single huge example which performs the entire story.  Downside: only\none description, no independent reporting of the steps of the story.</li>\n<li>Use Cucumber.  Downside: We agree totally with this guy: <a href=\"http://bit.ly/dmXqnY\" rel=\"nofollow\">http://bit.ly/dmXqnY</a></li>\n</ol>\n<p>RSpec-steps intentionally breaks RSpec's \"independent\" philosophy to let us get the\nonly thing we really want from Cucumber - the ability to execute some examples in sequence,\nand skip subsequent steps after a failure.</p>\n<h2><a href=\"#caveats-and-cautions\" aria-hidden=\"true\" class=\"anchor\" id=\"user-content-caveats-and-cautions\"><svg aria-hidden=\"true\" class=\"octicon octicon-link\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Caveats and cautions</h2>\n<p>Don't call \"describe\" inside of \"steps\".  As of 2.0, this is an error.</p>\n<p>As of 2.0, Steps no longer automatically adds its DSL to the top level. If you\nwant that behavior (especially if you're updating an older project) add:</p>\n<pre><code>require 'rspec-steps/monkeypatching'\n</code></pre>\n<p>to e.g. <code>spec_helper.rb.</code></p>\n<p>If you're using RSpec-Steps with Rails (for instance, with Capybara), you will\nabsolutely need to make sure you have transactional fixtures off. Otherwise,\nyou'll experience problems where the tests and the application appear to see\ncompletely different databases.</p>\n<p>While Steps 2.0 retains it's shift in lifecycle hooks (:each become :all,\nthere's a :step hook), this shift <em>no longer</em> applies to config.before <em>et al</em>\n-- you'll need to use config.before :each to run around each step. This is the\nprimary change to the Steps interface that called for a major version bump.</p>\n<p>If you're migrating a project from a previous version: be sure that any\ndependency on Waterpig is at least at 0.12. Then remove any <code>before :step</code>\ncalls in spec support files.</p>\n<h2><a href=\"#advanced-stuff--shared-steps\" aria-hidden=\"true\" class=\"anchor\" id=\"user-content-advanced-stuff--shared-steps\"><svg aria-hidden=\"true\" class=\"octicon octicon-link\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Advanced stuff:  shared steps</h2>\n<p>If you have (for example) two user stories that share the same first N steps but then\ndiverge, you can DRY your code out with shared_steps blocks, like so:</p>\n<pre><code>   shared_steps \"For a logged-in user\" do\n     it \"should have login form\"\n       visit root\n       page.should have_selector \"form#login\"\n     end\n\n     it \"should log the user in\" do\n       fill_in :name, \"Johnny User\"\n       page.should have_text \"Welcome, Johnny!\"\n     end\n   end\n\n   steps \"updating password\" do\n     perform_steps \"For a logged-in user\"\n\n     it \"should update the password\" do\n       ...\n     end\n   end\n\n   steps \"uploading a profile picture\" do\n     perform_steps \"For a logged-in user\"\n\n     it \"should upload a picture\" do\n        ...\n     end\n   end\n</code></pre>\n<h2><a href=\"#versions-and-dependencies\" aria-hidden=\"true\" class=\"anchor\" id=\"user-content-versions-and-dependencies\"><svg aria-hidden=\"true\" class=\"octicon octicon-link\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Versions and Dependencies</h2>\n<p>The goal is to try to be compatible with as many versions\nof RSpec 3.x as possible.</p>\n<p>We make good use of Travis to check compatibility, however. You can check what\nversions of RSpec and Ruby RSpec-Steps works with here:\n<a href=\"https://travis-ci.org/LRDesign/rspec-steps\" rel=\"nofollow\">https://travis-ci.org/LRDesign/rspec-steps</a></p>\n</article></div>"