"<div class=\"announce instapaper_body md\" data-path=\"README.md\" id=\"file\"><article class=\"markdown-body entry-content\" itemprop=\"text\"><h1><a href=\"#pairedmq\" aria-hidden=\"true\" class=\"anchor\" id=\"user-content-pairedmq\"><svg aria-hidden=\"true\" class=\"octicon octicon-link\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>pairedmq</h1>\n<p><a href=\"https://travis-ci.org/gaggle/pairedmq\" rel=\"nofollow\"><img src=\"https://camo.githubusercontent.com/5fe2b45b4d7ea8577e5286014c1fed6812ef9d62/68747470733a2f2f7472617669732d63692e6f72672f676167676c652f7061697265646d712e7376673f6272616e63683d6d6173746572\" alt=\"Build Status\" data-canonical-src=\"https://travis-ci.org/gaggle/pairedmq.svg?branch=master\" style=\"max-width:100%;\"></a></p>\n<p>Simple paired client/server:\nYou make a client that spawns a server,\nand you tell it what to do.</p>\n<p>It's especially easy to run Python-like interpreters such as Autodesk Maya,\nyou can execute Maya commands from your pure-Python tool to e.g. batch-process assets.</p>\n<p>But any environment that supports <a href=\"http://zeromq.org\" rel=\"nofollow\">ZeroMQ</a> can be automated, sky's the limit.</p>\n<h2><a href=\"#getting-started\" aria-hidden=\"true\" class=\"anchor\" id=\"user-content-getting-started\"><svg aria-hidden=\"true\" class=\"octicon octicon-link\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Getting Started</h2>\n<p>Lets do a simple example. This guide is based on Windows but should be easy to adapt to Linux/Mac.</p>\n<ul>\n<li>Make a folder somewhere to hold this experiment</li>\n<li>Open a command line prompt in that folder</li>\n</ul>\n<p>You probably want to activate a virtualenv for this,\nto avoid polluting your global modules:</p>\n<pre><code>&gt; virtualenv .venv\n&gt; .venv\\Scripts\\activate\n</code></pre>\n<p>Good, now Python modules we install will only go to this folder.\nLet's do our simple experiment:</p>\n<pre><code>&gt; pip install git+https://github.com/gaggle/pairedmq.git\n&gt; python\n&gt;&gt;&gt; from evalexec.client import EvalExecClient\n&gt;&gt;&gt; c = EvalExecClient()\n&gt;&gt;&gt; c.eval(\"1 + 1\")\n2\n</code></pre>\n<p>Great, you just sent that expression to the server process,\nit got calculated,\nand returned to your client.</p>\n<h2><a href=\"#the-next-step\" aria-hidden=\"true\" class=\"anchor\" id=\"user-content-the-next-step\"><svg aria-hidden=\"true\" class=\"octicon octicon-link\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>The Next Step</h2>\n<p>This library provides 5 extendable classes, so you can customize behavior to your liking:</p>\n<pre><code>pairedmq.client.Client\npairedmq.server.Server\npairedmq.evalexec.client.EvalExecClient\npairedmq.evalexec.server.EvalExecClient\npairedmq.mayaclient.client.MayaClient\n</code></pre>\n<p>You can inherit from either of these and override/extend as you please.\nThe <code>pairedmq</code> baseclasses needs just one override each to get going,\nthe <code>evalexec</code> classes are good to go as-is (they spawn a normal python process),\nand if your needs are specifically to run Maya you can use the <code>MayaClient</code> class.</p>\n<h2><a href=\"#using-maya\" aria-hidden=\"true\" class=\"anchor\" id=\"user-content-using-maya\"><svg aria-hidden=\"true\" class=\"octicon octicon-link\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Using Maya</h2>\n<p>Lets kick it up a notch and try interacting with Autodesk Maya.\nWith this technique we can write pure-Python tools that uses Maya for calculations,\nwhich has several benefits over using the Maya Python interpreter directly:</p>\n<ul>\n<li>You're not tied to the Python version that comes with Maya</li>\n<li>You're not limited to libraries that may or may not exist for Maya's Python</li>\n<li>You're not tied to any stability issues of Maya</li>\n</ul>\n<p>And it's pretty easy to do:</p>\n<p>First of all it's necessary to install ZMQ into Maya\n(It's the underlying communication library through which client and server talks together).\n<a href=\"http://www.robg3d.com/maya-windows-binaries/\" rel=\"nofollow\">This page has precompiled zip files specifically made for Maya</a>.\nDownload the file matching your Maya version\nand extract it into <code>&lt;maya version&gt;/Python/Lib/site-packages</code>.</p>\n<p>Usually:</p>\n<ul>\n<li>Windows: <code>\"C:\\Program Files\\Autodesk\\&lt;Maya version&gt;\\Python/Lib/site-packages\"</code></li>\n<li>Mac: <code>\"/applications/autodesk/&lt;maya version&gt;/Python/Lib/site-packages\"</code></li>\n</ul>\n<p>The <code>site-packages</code> folder should end up containing a <code>zmq</code> folder.</p>\n<p>Now let's create a <code>MayaClient</code>:</p>\n<pre><code>&gt; python\n&gt;&gt;&gt; from pairedmq.mayaclient.client import MayaClient\n&gt;&gt;&gt; c = MayaClient(&lt;path to mayapy.exe&gt;)\n</code></pre>\n<p>That <code>exe</code> string has to point to where you have Maya installed, usually it's:</p>\n<ul>\n<li>Windows: <code>r\"C:\\Program Files\\Autodesk\\&lt;Maya version&gt;\\bin\\mayabatch.exe\"</code></li>\n<li>Mac: <code>r\"/applications/autodesk/&lt;maya version&gt;/bin/mayabatch\"</code> on Mac</li>\n</ul>\n<p>And finally let's create a sphere and get its radius:</p>\n<pre><code>&gt;&gt;&gt; c.exec_(\"import pymel.core as pmc\", timeout=60000)\n&gt;&gt;&gt; c.exec_(\"t, s = pmc.polySphere()\")\n&gt;&gt;&gt; c.eval(\"s.radius.get()\")\n1.0\n</code></pre>\n<p>That's it, the full power of Maya is in your hands. Now make something cool!</p>\n<h2><a href=\"#thanks\" aria-hidden=\"true\" class=\"anchor\" id=\"user-content-thanks\"><svg aria-hidden=\"true\" class=\"octicon octicon-link\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Thanks</h2>\n<p>This whole library is based on examples\nfrom the wonderful book <a href=\"https://www.packtpub.com/hardware-and-creative/practical-maya-programming-python\" rel=\"nofollow\">Practical Maya Programming with Python</a> by <a href=\"http://github.com/rgalanakis\">Rob Galanakis</a>.\nIf you are dealing with Maya in any technical capacity I cannot recommend this book enough.</p>\n</article></div>"